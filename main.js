/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => DragAndDropBlocksPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// src/DragVisuals/DragVisuals.ts
var import_obsidian = require("obsidian");

// src/DragVisuals/DragPlaceholder.ts
var DragPlaceholder = class {
  constructor() {
    this.element = this.createDragPlaceholderElement();
    document.body.appendChild(this.element);
  }
  createDragPlaceholderElement() {
    const dragPlaceholder = document.createElement("div");
    dragPlaceholder.className = "drag-placeholder";
    dragPlaceholder.style.position = "absolute";
    dragPlaceholder.style.height = "2px";
    dragPlaceholder.style.backgroundColor = "var(--interactive-accent)";
    dragPlaceholder.style.display = "none";
    dragPlaceholder.style.zIndex = "1000";
    return dragPlaceholder;
  }
  showDragPlaceholder(view, pos) {
    const doc = view.state.doc;
    const line = doc.lineAt(pos);
    let placeholderPos;
    if (pos >= doc.length) {
      placeholderPos = doc.length;
    } else if (pos - line.from < (line.to - line.from) / 2) {
      placeholderPos = line.from;
    } else {
      placeholderPos = line.to;
    }
    const rect = view.coordsAtPos(placeholderPos);
    if (!rect)
      return;
    const lineElement = view.dom.querySelector(".cm-line");
    if (!lineElement)
      return;
    const lineRect = lineElement.getBoundingClientRect();
    this.element.style.display = "block";
    this.element.style.left = `${lineRect.left}px`;
    this.element.style.width = `${lineRect.width}px`;
    this.element.style.height = "2px";
    if (placeholderPos <= doc.line(1).from) {
      const firstLineRect = view.coordsAtPos(0);
      if (firstLineRect) {
        this.element.style.top = `${firstLineRect.top - 2}px`;
      }
    } else if (line.number === doc.lines) {
      this.element.style.top = `${rect.bottom + 2}px`;
    } else {
      const lineAboveRect = view.coordsAtPos(line.from - 1);
      if (lineAboveRect) {
        this.element.style.top = `${(lineAboveRect.bottom + rect.top) / 2}px`;
      }
    }
  }
  hideDragPlaceholder() {
    this.element.style.display = "none";
  }
};

// src/DragVisuals/DragHandleManager.ts
var import_view = require("@codemirror/view");
var import_state = require("@codemirror/state");
var DragHandleWidget = class extends import_view.WidgetType {
  toDOM() {
    const span = document.createElement("span");
    span.className = "cm-drag-handler-container";
    span.setAttribute("draggable", "true");
    span.setAttribute("contenteditable", "false");
    span.innerHTML = `
            <span class="clickable-icon">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="svg-icon lucide-grip-vertical">
                    <circle cx="9" cy="12" r="1"></circle>
                    <circle cx="9" cy="5" r="1"></circle>
                    <circle cx="9" cy="19" r="1"></circle>
                    <circle cx="15" cy="12" r="1"></circle>
                    <circle cx="15" cy="5" r="1"></circle>
                    <circle cx="15" cy="19" r="1"></circle>
                </svg>
            </span>
        `;
    return span;
  }
};
var addDragHandle = import_state.StateEffect.define();
var setDraggingLine = import_state.StateEffect.define();
var dragHandleField = import_state.StateField.define({
  create() {
    return import_view.Decoration.none;
  },
  update(handles, tr) {
    handles = handles.map(tr.changes);
    for (let e of tr.effects) {
      if (e.is(addDragHandle)) {
        handles = handles.update({
          add: [import_view.Decoration.widget({
            widget: new DragHandleWidget(),
            side: -1
          }).range(e.value.from)]
        });
      }
    }
    return handles;
  },
  provide: (f) => import_view.EditorView.decorations.from(f)
});
var draggingLineField = import_state.StateField.define({
  create() {
    return null;
  },
  update(value, tr) {
    for (let e of tr.effects) {
      if (e.is(setDraggingLine)) {
        return e.value;
      }
    }
    return value;
  },
  provide: (f) => import_view.EditorView.decorations.from(f, (value) => {
    return (view) => {
      if (value === null)
        return import_view.Decoration.none;
      let line = view.state.doc.line(value);
      return import_view.Decoration.set(import_view.Decoration.line({ class: "cm-dragging-line" }).range(line.from));
    };
  })
});
var dragHandlePlugin = import_view.ViewPlugin.fromClass(class {
  constructor(view) {
    this.decorations = this.createDecorations(view);
  }
  update(update) {
    if (update.docChanged || update.viewportChanged) {
      this.decorations = this.createDecorations(update.view);
    }
  }
  createDecorations(view) {
    let widgets = [];
    for (let { from, to } of view.visibleRanges) {
      for (let pos = from; pos <= to; ) {
        let line = view.state.doc.lineAt(pos);
        widgets.push(import_view.Decoration.widget({
          widget: new DragHandleWidget(),
          side: -1
        }).range(line.from));
        pos = line.to + 1;
      }
    }
    return import_view.Decoration.set(widgets);
  }
}, {
  decorations: (v) => v.decorations
});

// src/DragVisuals/DragVisuals.ts
var DragVisuals = class {
  constructor(app) {
    this.app = app;
    this.dragPlaceholder = new DragPlaceholder();
  }
  showDragPlaceholder(view, pos) {
    this.dragPlaceholder.showDragPlaceholder(view, pos);
  }
  hideDragPlaceholder() {
    this.dragPlaceholder.hideDragPlaceholder();
  }
  createDragPreview(text, event) {
    var _a;
    return;
    const dragImage = document.createElement("div");
    dragImage.textContent = text.slice(0, 20) + "...";
    dragImage.className = "drag-preview";
    document.body.appendChild(dragImage);
    (_a = event.dataTransfer) == null ? void 0 : _a.setDragImage(dragImage, 0, 0);
    setTimeout(() => document.body.removeChild(dragImage), 0);
  }
  getEditorView() {
    const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (!view)
      return null;
    return view.editor.cm;
  }
  setDraggingLine(view, lineNumber) {
    view.dispatch({
      effects: setDraggingLine.of(lineNumber)
    });
  }
  static getDragExtensions() {
    return [
      dragHandleField,
      draggingLineField,
      dragHandlePlugin
    ];
  }
};

// src/BlockMover.ts
var BlockMover = class {
  static moveBlock(view, fromLine, toLine) {
    const doc = view.state.doc;
    const totalLines = doc.lines;
    if (fromLine < 1 || fromLine > totalLines || toLine < 1 || toLine > totalLines) {
      console.error("\u65E0\u6548\u7684\u884C\u53F7");
      return false;
    }
    if (fromLine === toLine) {
      return true;
    }
    const lineToMove = doc.line(fromLine);
    const contentToMove = lineToMove.text;
    const targetLine = doc.line(toLine);
    const insertPos = toLine > fromLine ? targetLine.to : targetLine.from;
    let changes = [];
    changes.push({ from: lineToMove.from, to: lineToMove.to + 1, insert: "" });
    changes.push({ from: insertPos, insert: contentToMove + "\n" });
    view.dispatch({ changes });
    console.log("\u79FB\u52A8\u884C:", {
      \u4ECE: fromLine,
      \u5230: toLine,
      \u5185\u5BB9: contentToMove
    });
    return true;
  }
};

// src/utils.ts
var import_obsidian2 = require("obsidian");
function getEditorView(app) {
  const view = app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
  if (!view)
    return null;
  return view.editor.cm;
}

// main.ts
var DragAndDropBlocksPlugin = class extends import_obsidian3.Plugin {
  constructor() {
    super(...arguments);
    this.draggingStartPos = null;
  }
  async onload() {
    console.log("Loading DragAndDropBlocks plugin");
    this.dragVisuals = new DragVisuals(this.app);
    this.registerEditorExtension([
      dragHandleField,
      draggingLineField,
      dragHandlePlugin,
      ...DragVisuals.getDragExtensions()
    ]);
    this.addDragAndDropListeners();
    console.log("DragAndDropBlocks plugin loaded");
  }
  onunload() {
    console.log("Unloading DragAndDropBlocks plugin");
  }
  addDragAndDropListeners() {
    this.registerDomEvent(document, "dragstart", this.onDragStart.bind(this));
    this.registerDomEvent(document, "dragover", this.onDragOver.bind(this));
    this.registerDomEvent(document, "drop", this.onDrop.bind(this));
    this.registerDomEvent(document, "dragend", this.onDragEnd.bind(this));
  }
  onDragStart(event) {
    const target = event.target;
    if (!target.classList.contains("cm-drag-handler-container"))
      return;
    const view = getEditorView(this.app);
    if (!view)
      return;
    const pos = view.posAtDOM(target);
    if (pos === null)
      return;
    const line = view.state.doc.lineAt(pos);
    this.draggingStartPos = line.from;
    console.log("\u62D6\u52A8\u5F00\u59CB:", {
      lineNumber: line.number,
      lineContent: line.text,
      startPosition: this.draggingStartPos
    });
    event.dataTransfer.effectAllowed = "move";
    this.dragVisuals.createDragPreview(line.text, event);
    this.dragVisuals.setDraggingLine(view, line.number);
  }
  onDragOver(event) {
    event.preventDefault();
    event.dataTransfer.dropEffect = "move";
    const view = getEditorView(this.app);
    if (!view)
      return;
    const pos = view.posAtCoords({ x: event.clientX, y: event.clientY });
    if (pos === null)
      return;
    this.dragVisuals.showDragPlaceholder(view, pos);
  }
  onDrop(event) {
    event.preventDefault();
    const view = getEditorView(this.app);
    if (!view || this.draggingStartPos === null)
      return;
    const targetPos = view.posAtCoords({ x: event.clientX, y: event.clientY });
    if (targetPos === null)
      return;
    const sourcePos = this.draggingStartPos;
    const sourceLine = view.state.doc.lineAt(sourcePos);
    const targetLine = view.state.doc.lineAt(targetPos);
    console.log("\u62D6\u52A8\u7ED3\u675F:", {
      sourceLineNumber: sourceLine.number,
      targetLineNumber: targetLine.number,
      targetPosition: targetPos
    });
    if (sourceLine.number !== targetLine.number) {
      let targetLineNumber = targetLine.number;
      if (targetLineNumber > sourceLine.number) {
        targetLineNumber -= 1;
      }
      BlockMover.moveBlock(view, sourceLine.number - 1, targetLineNumber - 1);
    }
    this.dragVisuals.hideDragPlaceholder();
    this.dragVisuals.setDraggingLine(view, null);
    this.draggingStartPos = null;
    console.log("Drop completed");
  }
  onDragEnd(event) {
    const view = getEditorView(this.app);
    if (!view)
      return;
    this.dragVisuals.hideDragPlaceholder();
    this.dragVisuals.setDraggingLine(view, null);
    this.draggingStartPos = null;
    console.log("Drag ended");
  }
};
//# sourceMappingURL=data:application/json;base64,
